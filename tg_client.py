from telethon.sync import TelegramClient
from telethon.tl.types import User
from datetime import datetime, timedelta
import json
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json", "r") as f:
    config = json.load(f)

api_id = config["api_id"]
api_hash = config["api_hash"]
phone = config["phone"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient("session", api_id, api_hash)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async def start_client():
    await client.start(phone)
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (–±–µ–∑ –±–æ—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤, –≥—Ä—É–ø–ø)
async def fetch_chats():
    me = await client.get_me()
    my_id = me.id

    dialogs = await client.get_dialogs(limit=50)
    chat_list = []

    for dialog in dialogs:
        entity = dialog.entity
        if isinstance(entity, User) and not entity.bot and entity.id != my_id:
            chat_list.append(entity)

    return chat_list

# –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
async def fetch_messages(chat, days=30):
    since = datetime.now() - timedelta(days=days)
    messages = []

    async for msg in client.iter_messages(chat.id, offset_date=since, reverse=True):
        messages.append({
            "text": msg.message or "",
            "timestamp": msg.date.isoformat(),
            "sender": "manager" if msg.out else "client"
        })

    return messages

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –≤ JSON
async def save_chat_history():
    os.makedirs("data", exist_ok=True)
    chats = await fetch_chats()

    for chat in chats:
        messages = await fetch_messages(chat)
        filename = f"data/chat_{chat.id}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump({
                "chat_id": chat.id,
                "title": getattr(chat, 'first_name', 'NoTitle'),
                "messages": messages
            }, f, ensure_ascii=False, indent=2)

    print("üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫—É /data")
